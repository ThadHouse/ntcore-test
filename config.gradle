import edu.wpi.first.nativeutils.*

def windowsCompilerArgs = ['/EHsc', '/DNOMINMAX', '/D_SCL_SECURE_NO_WARNINGS', '/D_WINSOCK_DEPRECATED_NO_WARNINGS', '/Zi', '/FS']
def windowsReleaseCompilerArgs = ['/O2']
def windowsDebugLinkerArgs = ['/DEBUG']

def linuxCompilerArgs = ['-std=c++11', '-Wformat=2', '-Wall', '-Wextra', '-Werror', '-pedantic', '-Wno-psabi', '-g',
                         '-Wno-unused-parameter', '-fPIC', '-rdynamic', '-Wno-error=deprecated-declarations', '-pthread']
def linuxLinkerArgs = ['-rdynamic', '-pthread']
def linuxReleaseCompilerArgs = ['-O2']
def linuxDebugCompilerArgs = ['-O0']
def linux32BitArg = '-m32'

def macCompilerArgs =  ['-std=c++11', '-Wall', '-Wextra', '-Werror', '-pedantic-errors', '-fPIC', '-g',
                            '-Wno-unused-parameter', '-Wno-missing-field-initializers', '-Wno-unused-private-field']
def macReleaseCompilerArgs = ['-O2']
def macDebugCompilerArgs = ['-O0']
def mac32BitArg = '-m32'

model {
    buildConfigs {
        winX86(BuildConfig) {
            architecture = 'x86'
            operatingSystem = 'windows'
            compilerArgs = windowsCompilerArgs
            debugLinkerArgs = windowsDebugLinkerArgs
            releaseCompilerArgs = windowsReleaseCompilerArgs
            crossCompile = false
            compilerFamily = 'VisualCpp'
        }
        winX64(BuildConfig) {
            architecture = 'x86-64'
            operatingSystem = 'windows'
            compilerArgs = windowsCompilerArgs
            debugLinkerArgs = windowsDebugLinkerArgs
            releaseCompilerArgs = windowsReleaseCompilerArgs
            crossCompile = false
            compilerFamily = 'VisualCpp'
        }
        linuxX86(BuildConfig) {
            architecture = 'x86'
            operatingSystem = 'linux'
            compilerArgs = linuxCompilerArgs
            compilerArgs << linux32BitArg
            linkerArgs = linuxLinkerArgs
            linkerArgs << linux32BitArg
            debugCompilerArgs = linuxDebugCompilerArgs
            releaseCompilerArgs = linuxReleaseCompilerArgs
            crossCompile = false
            compilerFamily = 'Gcc'
        }
        linuxX64(BuildConfig) {
            architecture = 'x86-64'
            operatingSystem = 'linux'
            compilerArgs = linuxCompilerArgs
            linkerArgs = linuxLinkerArgs
            debugCompilerArgs = linuxDebugCompilerArgs
            releaseCompilerArgs = linuxReleaseCompilerArgs
            crossCompile = false
            compilerFamily = 'Gcc'
        }
        macX86(BuildConfig) {
            architecture = 'x86'
            operatingSystem = 'osx'
            compilerArgs = macCompilerArgs
            compilerArgs << mac32BitArg
            linkerArgs << mac32BitArg
            debugCompilerArgs = macDebugCompilerArgs
            releaseCompilerArgs = macReleaseCompilerArgs
            crossCompile = false
            compilerFamily = 'Clang'
        }
        macX64(BuildConfig) {
            architecture = 'x86-64'
            operatingSystem = 'osx'
            compilerArgs = macCompilerArgs
            debugCompilerArgs = macDebugCompilerArgs
            releaseCompilerArgs = macReleaseCompilerArgs
            crossCompile = false
            compilerFamily = 'Clang'
        }
        roboRio(BuildConfig) {
            architecture = 'athena'
            operatingSystem = 'linux'
            toolChainPrefix = 'arm-frc-linux-gnueabi-'
            compilerArgs = linuxCompilerArgs
            linkerArgs = linuxLinkerArgs
            debugCompilerArgs = linuxDebugCompilerArgs
            releaseCompilerArgs = linuxReleaseCompilerArgs
            releaseStripBinaries = true
            crossCompile = true
            compilerFamily = 'Gcc'
            exclude << 'gmock'
        }
        raspbian(BuildConfig) {
            architecture = 'raspbian'
            operatingSystem = 'linux'
            toolChainPrefix = 'arm-linux-gnueabi-'
            compilerArgs = linuxCompilerArgs
            linkerArgs = linuxLinkerArgs
            debugCompilerArgs = linuxDebugCompilerArgs
            releaseCompilerArgs = linuxReleaseCompilerArgs
            crossCompile = true
            compilerFamily = 'Gcc'
            exclude << 'gmock'
        }
        armhf(BuildConfig) {
            architecture = 'armhf'
            operatingSystem = 'linux'
            toolChainPrefix = 'arm-linux-gnueabi-'
            compilerArgs = linuxCompilerArgs
            linkerArgs = linuxLinkerArgs
            debugCompilerArgs = linuxDebugCompilerArgs
            releaseCompilerArgs = linuxReleaseCompilerArgs
            crossCompile = true
            compilerFamily = 'Gcc'
            exclude << 'gmock'
        }
        armv8(BuildConfig) {
            architecture = 'armv8'
            operatingSystem = 'linux'
            toolChainPrefix = 'aarch-linux-gnu-'
            compilerArgs = linuxCompilerArgs
            linkerArgs = linuxLinkerArgs
            debugCompilerArgs = linuxDebugCompilerArgs
            releaseCompilerArgs = linuxReleaseCompilerArgs
            crossCompile = true
            compilerFamily = 'Gcc'
            exclude << 'gmock'
        }
        linuxArm(BuildConfig) {
            architecture = 'arm'
            operatingSystem = 'linux'
            compilerArgs = linuxCompilerArgs
            linkerArgs = linuxLinkerArgs
            debugCompilerArgs = linuxDebugCompilerArgs
            releaseCompilerArgs = linuxReleaseCompilerArgs
            crossCompile = false
            isArm = true
            compilerFamily = 'Gcc'
        }
    }
}
