import edu.wpi.first.nativeutils.NativeUtils
import org.gradle.api.file.FileCollection
import org.gradle.internal.os.OperatingSystem

    repositories {
        mavenLocal()
    }

buildscript {
        repositories {
        mavenLocal()
    }
    dependencies {
        classpath 'edu.wpi.first:native-utils:0.1-SNAPSHOT'
    }
}

apply plugin: 'cpp'
apply plugin: 'google-test'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.native-utils'
apply plugin: 'java'

apply from: 'config.gradle'

ext.deps = [
    "edu.wpi.first.wpiutil:wpiutil"
]

ext.jniDefinitionClasses = [ "edu.wpi.first.wpilibj.networktables.NetworkTablesJNI" ]

apply from: 'jni.gradle'

apply from: 'dependencies.gradle'

def platformSpecificIncludeFlag = { loc, cppCompiler ->
    if (OperatingSystem.current().isWindows()) {
        cppCompiler.args "/I$loc"
    } else {
        cppCompiler.args '-I', loc
    }
}

model {
    components {
        ntcore(NativeLibrarySpec) { }
    }
    binaries {
        setupJniCompile(it, edu.wpi.first.nativeutils.NativeUtils.getBuildConfigs())
        setupDependencies(it, project)
        withType(NativeBinarySpec) {
            
        }
        withType(GoogleTestTestSuiteBinarySpec) {
            lib project: ':gmock', library: 'gmock', linkage: 'static'
            lib library: 'ntcore', linkage: 'static'
            platformSpecificIncludeFlag("${rootDir}/src/ntcore/cpp", cppCompiler)
        }
    }
}

task cppSourcesZip(type: Zip) {
    destinationDir = project.buildDir
    classifier = "sources"

    from('src/ntcore/cpp') {
        into '/'
    }
}

task cppHeadersZip(type: Zip) {
    destinationDir = project.buildDir
    classifier = "headers"

    from('src/ntcore/headers') {
        into '/'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives cppHeadersZip
    archives cppSourcesZip
}

apply from: 'publish.gradle'