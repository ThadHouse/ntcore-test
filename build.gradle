import edu.wpi.first.nativeutils.NativeUtils
import org.gradle.api.file.FileCollection
import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'edu.wpi.first:native-utils:0.1-SNAPSHOT'
        classpath 'gradle.plugin.edu.wpi.first.wpilib.versioning:wpilib-version-plugin:1.6'
    }
}

apply plugin: 'cpp'
apply plugin: 'google-test'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.native-utils'
apply plugin: 'edu.wpi.first.jni-utils'
apply plugin: 'edu.wpi.first.dependency-utils'
apply plugin: 'edu.wpi.first.publish-utils'
apply plugin: 'edu.wpi.first.exports-utils'
apply plugin: 'java'

dependencies {
    compile 'edu.wpi.first.wpiutil:wpiutil-java:+'
    runtime 'edu.wpi.first.wpiutil:wpiutil-java:+'
}

apply from: 'config.gradle'

model {
    jniConfigs {
        ntcore(JNIConfig) {
            jniDefinitionClasses = [ "edu.wpi.first.wpilibj.networktables.NetworkTablesJNI" ]
            jniArmHeaderLocation = file("${rootDir}/src/arm-linux-jni")
            sourceSets = [ project.sourceSets.main ]
        }
        ntcoreJNI(JNIConfig) {
            jniDefinitionClasses = [ "edu.wpi.first.wpilibj.networktables.NetworkTablesJNI" ]
            jniArmHeaderLocation = file("${rootDir}/src/arm-linux-jni")
            sourceSets = [ project.sourceSets.main ]
        }
    }
}

model {
    exportsConfigs {
        ntcore(ExportsConfig) {
            x86ExcludeSymbols = [ '_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                  '_CT??_R0?AVbad_cast',
                                  '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                  '_TI5?AVfailure' ]
            x64ExcludeSymbols = [ '_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                  '_CT??_R0?AVbad_cast',
                                  '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                  '_TI5?AVfailure' ]
        }
    }
}

model {
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = '+'
            sharedConfigs = [ ntcore: [ 'linux:athena','windows:x86', 'windows:x86-64', 'linux:x86', 'linux:x86-64', 'osx:x86', 'osx:x86-64',
                                        'linux:raspbian', 'linux:armhf', 'linux:armv8', 'linux:arm' ],
                              ntcoreExe: [ 'linux:athena','windows:x86', 'windows:x86-64', 'linux:x86', 'linux:x86-64', 'osx:x86', 'osx:x86-64',
                                        'linux:raspbian', 'linux:armhf', 'linux:armv8', 'linux:arm' ] ]
            staticConfigs = [ ntcoreJNI: [ 'linux:athena','windows:x86', 'windows:x86-64', 'linux:x86', 'linux:x86-64', 'osx:x86', 'osx:x86-64',
                                        'linux:raspbian', 'linux:armhf', 'linux:armv8', 'linux:arm' ] ]
        }
    }
}

model {
    components {
        ntcore(NativeLibrarySpec) {
        }
        ntcoreJNI(NativeLibrarySpec) {
            binaries.all {
                if (it.targetPlatform.operatingSystem.name == 'windows') {
                    linker.args "/DEF:${rootDir}/ntcore.def"
                }
            }
            sources {
                cpp {
                    source {
                        srcDirs = ['src/ntcore/cpp']
                        includes = ['**/*.cpp']
                    }
                    exportedHeaders {
                        srcDirs = ['src/ntcore/headers']
                        includes = ['**/*.h']
                    }
                }
            }
        }
        if (!project.hasProperty('skipTestExe')) {
            ntcoreExe(NativeExecutableSpec) {
                sources {
                    cpp {
                        lib library: "ntcore"
                    }
                }
            }
        }
    }
    binaries {
        withType(StaticLibraryBinarySpec) {
            if (it.component.name == 'ntcoreJNI') {
                it.buildable = false
            }
        }
        withType(GoogleTestTestSuiteBinarySpec) {
            if (it.component.name == 'ntcoreJNITest' || it.component.name == 'ntcoreExeTest') {
                it.buildable = false
            }
            lib project: ':gmock', library: 'gmock', linkage: 'static'
            lib library: 'ntcore', linkage: 'shared'
            NativeUtils.setPlatformSpecificIncludeFlag("${rootDir}/src/ntcore/cpp".toString(), cppCompiler)
        }
    }
}

task cppSourcesZip(type: Zip) {
    destinationDir = project.buildDir
    classifier = "sources"

    from('src/ntcore/cpp') {
        into '/'
    }
}

task cppHeadersZip(type: Zip) {
    destinationDir = project.buildDir
    classifier = "headers"

    from('src/ntcore/headers') {
        into '/'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives cppHeadersZip
    archives cppSourcesZip
}

apply from: 'publish.gradle'

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}
