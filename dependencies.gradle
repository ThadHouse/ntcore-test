import edu.wpi.first.nativeutils.NativeUtils
import edu.wpi.first.nativeutils.BuildConfig

buildscript {
        repositories {
        mavenLocal()
    }
    dependencies {
        classpath 'edu.wpi.first:native-utils:0.1-SNAPSHOT'
    }
}


public class WPILibDependencySet implements NativeDependencySet {
    private String m_rootLocation
    private BuildConfig m_buildConfig
    private Project m_project
    private String m_libraryName


    public WPILibDependencySet(String rootLocation, BuildConfig config, String libraryName, Project project) {
      m_rootLocation = rootLocation
      m_buildConfig = config
      m_libraryName = libraryName
      m_project = project
    }

    public FileCollection getIncludeRoots() {
        return m_project.files("${m_rootLocation}/headers")
    }

    private FileCollection getFiles() {
      def classifier = edu.wpi.first.nativeutils.NativeUtils.getClassifier(m_buildConfig)
      def platformPath = edu.wpi.first.nativeutils.NativeUtils.getPlatformPath(m_buildConfig)
      if (classifier.contains('-')) {
        classifier = classifier.substring(classifier.indexOf('-') + 1)
      }
      def extension
      def dirPath
      if (m_buildConfig.operatingSystem == 'windows') {
        extension = '.lib'
        dirPath = 'static'
      } else {
        extension = '.so'
        dirPath = 'shared'
      }
      
      def prefix = m_buildConfig.operatingSystem == 'windows' ? '' : 'lib'
      return m_project.files("${m_rootLocation}/${classifier}/${platformPath}/${dirPath}/${prefix}${m_libraryName}${extension}")
    }

    public FileCollection getLinkFiles() {
        return getFiles()
    }

    public FileCollection getRuntimeFiles() {
        return getFiles()
    }
}

configurations.create('nativeDeps')

def buildConfigs = edu.wpi.first.nativeutils.NativeUtils.getBuildConfigs()

dependencies {
  deps.each { dep ->
    nativeDeps "${dep}-cpp:+:headers@zip"
    buildConfigs.each { config ->
      nativeDeps "${dep}-cpp:+:${edu.wpi.first.nativeutils.NativeUtils.getClassifier(config)}@zip"
    }
  }
}

def depLocation = "$buildDir/dependencies"

configurations.nativeDeps.files.each { file->
  def depName = file.name.substring(0, file.name.indexOf('-'))
  def classifier = file.name.substring(file.name.lastIndexOf('-') + 1, file.name.lastIndexOf('.'))
  def downloadTask = tasks.create("download${depName.capitalize()}${classifier}", Copy) {
      description = "Downloads and unzips the $depName $classifier dependency."
      group = 'Dependencies'
      from zipTree(file)
      into "$depLocation/${depName.toLowerCase()}/${classifier}"
  }
    def jniTask = tasks.getByPath('jniHeaders')
  jniTask.dependsOn(downloadTask)
}

ext.setupDependencies = { binaries, project ->
  binaries.all { binary ->
  if (binary instanceof NativeBinarySpec) {
    buildConfigs.findAll { (binary.targetPlatform.architecture.name == it.architecture
                              && binary.targetPlatform.operatingSystem.name == it.operatingSystem) }.each 
      { config->
        deps.each {
          def depName = it.split(':', 2)[1]

          binary.lib(new WPILibDependencySet("$depLocation/${depName.toLowerCase()}", config, depName, project))
        }
      }
    }
  }
}